// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PharmacyApp.Data;

namespace PharmacyApp.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20191215144008_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PharmacyApp.Data.AdverseEffect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DrugId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DrugId");

                    b.ToTable("AdverseEffect");
                });

            modelBuilder.Entity("PharmacyApp.Data.Benefit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VitaminId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VitaminId");

                    b.ToTable("Benefit");
                });

            modelBuilder.Entity("PharmacyApp.Data.DrugFirm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DrugFirm");
                });

            modelBuilder.Entity("PharmacyApp.Data.PharmacyInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("PharmacyInfo");
                });

            modelBuilder.Entity("PharmacyApp.Data.PharmacyUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PharmacyId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PharmacyId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PharmacyApp.Data.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PharmacyInfoId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("PharmacyInfoId");

                    b.ToTable("Product");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Product");
                });

            modelBuilder.Entity("PharmacyApp.Data.Symptom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DrugId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DrugId");

                    b.ToTable("Symptom");
                });

            modelBuilder.Entity("PharmacyApp.Data.Drug", b =>
                {
                    b.HasBaseType("PharmacyApp.Data.Product");

                    b.Property<int?>("DrugId")
                        .HasColumnType("int");

                    b.Property<int?>("FirmId")
                        .HasColumnType("int");

                    b.Property<int?>("PharmacyInfoId1")
                        .HasColumnType("int");

                    b.HasIndex("DrugId");

                    b.HasIndex("FirmId");

                    b.HasIndex("PharmacyInfoId1");

                    b.HasDiscriminator().HasValue("Drug");
                });

            modelBuilder.Entity("PharmacyApp.Data.Vitamin", b =>
                {
                    b.HasBaseType("PharmacyApp.Data.Product");

                    b.Property<int?>("PharmacyInfoId1")
                        .HasColumnName("Vitamin_PharmacyInfoId1")
                        .HasColumnType("int");

                    b.HasIndex("PharmacyInfoId1");

                    b.HasDiscriminator().HasValue("Vitamin");
                });

            modelBuilder.Entity("PharmacyApp.Data.AdverseEffect", b =>
                {
                    b.HasOne("PharmacyApp.Data.Drug", null)
                        .WithMany("AdverseEffects")
                        .HasForeignKey("DrugId");
                });

            modelBuilder.Entity("PharmacyApp.Data.Benefit", b =>
                {
                    b.HasOne("PharmacyApp.Data.Vitamin", null)
                        .WithMany("Benefits")
                        .HasForeignKey("VitaminId");
                });

            modelBuilder.Entity("PharmacyApp.Data.PharmacyUser", b =>
                {
                    b.HasOne("PharmacyApp.Data.PharmacyInfo", "Pharmacy")
                        .WithMany()
                        .HasForeignKey("PharmacyId");
                });

            modelBuilder.Entity("PharmacyApp.Data.Product", b =>
                {
                    b.HasOne("PharmacyApp.Data.PharmacyInfo", null)
                        .WithMany("OtherProducts")
                        .HasForeignKey("PharmacyInfoId");
                });

            modelBuilder.Entity("PharmacyApp.Data.Symptom", b =>
                {
                    b.HasOne("PharmacyApp.Data.Drug", null)
                        .WithMany("RelievedSymptoms")
                        .HasForeignKey("DrugId");
                });

            modelBuilder.Entity("PharmacyApp.Data.Drug", b =>
                {
                    b.HasOne("PharmacyApp.Data.Drug", null)
                        .WithMany("Interactions")
                        .HasForeignKey("DrugId");

                    b.HasOne("PharmacyApp.Data.DrugFirm", "Firm")
                        .WithMany()
                        .HasForeignKey("FirmId");

                    b.HasOne("PharmacyApp.Data.PharmacyInfo", null)
                        .WithMany("Drugs")
                        .HasForeignKey("PharmacyInfoId1");
                });

            modelBuilder.Entity("PharmacyApp.Data.Vitamin", b =>
                {
                    b.HasOne("PharmacyApp.Data.PharmacyInfo", null)
                        .WithMany("Vitamins")
                        .HasForeignKey("PharmacyInfoId1");
                });
#pragma warning restore 612, 618
        }
    }
}
